#!/usr/bin/env ruby


# ice_to_json -- convert ICE XML from Syndetics (table of contents data)
# to concatenated JSON

require 'optparse'
require 'argot/xml'
require 'json'

module JsonRuntime

    class Processor
        include Argot::XML
        def initialize(options)
            @options = options
            @recout = false
        end

        def reset
            @recout = false
        end

        def process(source)
            self.read(source) do |rec|
                $stdout.write ',' if @options[:valid] and @recout
                $stdout.write @options[:pretty] ? JSON.pretty_generate(rec) : rec.to_json
                @recout = true
            end
            $stdout.write ']' if @options[:valid]
        end

        def read(source)
            handler = ICEExtractor.new(source)
            handler.each do |rec| 
                return rec unless rec
                result = ICEDocument.new( id: rec[:id], title: rec[:title], isbns: rec[:isbn])
                result.chapters = rec[:chapters].collect do |chapter|
                    ICEChapter.new( title: chapter[:title], author: chapter[:author] )
                end
                yield rec
            end
        end
    end
end

options = {:pretty => false, :valid => false}
op = OptionParser.new do |opts|
    opts.banner = "Usage : ice_to_json [options]"

    opts.on("-p", "--pretty", "Pretty-print output?") do |p|
        options[:pretty] = true
    end

    opts.on('-v', '--valid-output', "Output valid JSON?")  do |v|
        options[:valid] = true
    end
end

op.parse!

recout = false

processor = JsonRuntime::Processor.new(options)

$stdout.write '[' if options[:valid]
if ARGV.empty?
    processor.process($stdin)
else
    puts "PROCESSING '#{ARGV}'"
    ARGV.each do |file|
        processor.process(file) if File.exist?(file)
    end
end

